"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const ObjectBuilder_1 = require("./ObjectBuilder");
class Prompt extends events_1.default {
    on(event, callback) {
        super.on(event, callback);
        return this;
    }
    async ask(title, options) {
        options = options || {};
        const builder = new ObjectBuilder_1.ObjectBuilder();
        builder.addProp('type', 'input');
        builder.addProp('name', options.name);
        builder.addProp('message', title);
        builder.addProp('initial', options.default);
        builder.addProp('result', options.result);
        builder.addProp('format', options.format);
        builder.addProp('validate', options.validate);
        return this.$prompt(builder.toJSON());
    }
    async secure(title, options) {
        options = options || {};
        const builder = new ObjectBuilder_1.ObjectBuilder();
        builder.addProp('type', 'password');
        builder.addProp('name', options.name);
        builder.addProp('message', title);
        builder.addProp('initial', options.default);
        builder.addProp('result', options.result);
        builder.addProp('format', options.format);
        builder.addProp('validate', options.validate);
        return this.$prompt(builder.toJSON());
    }
    async confirm(title, options) {
        options = options || {};
        const builder = new ObjectBuilder_1.ObjectBuilder();
        builder.addProp('type', 'confirm');
        builder.addProp('name', options.name);
        builder.addProp('message', title);
        builder.addProp('initial', options.default);
        builder.addProp('result', options.result);
        builder.addProp('format', options.format);
        builder.addProp('validate', options.validate);
        return this.$prompt(builder.toJSON());
    }
    async toggle(title, choices, options) {
        options = options || {};
        const builder = new ObjectBuilder_1.ObjectBuilder();
        builder.addProp('type', 'toggle');
        builder.addProp('name', options.name);
        builder.addProp('message', title);
        builder.addProp('initial', options.default);
        builder.addProp('result', options.result);
        builder.addProp('format', options.format);
        builder.addProp('validate', options.validate);
        builder.addProp('enabled', choices[0]);
        builder.addProp('disabled', choices[1]);
        return this.$prompt(builder.toJSON());
    }
    async choice(title, choices, options) {
        options = options || {};
        const builder = new ObjectBuilder_1.ObjectBuilder();
        builder.addProp('type', 'select');
        builder.addProp('name', options.name);
        builder.addProp('message', title);
        builder.addProp('initial', options.default);
        builder.addProp('result', options.result);
        builder.addProp('format', options.format);
        builder.addProp('validate', options.validate);
        builder.addProp('choices', choices.map((choice) => {
            if (typeof (choice) === 'string') {
                return { name: choice, message: choice, value: choice };
            }
            return choice;
        }));
        return this.$prompt(builder.toJSON());
    }
    async multiple(title, choices, options) {
        options = options || {};
        const builder = new ObjectBuilder_1.ObjectBuilder();
        builder.addProp('type', 'multiselect');
        builder.addProp('name', options.name);
        builder.addProp('message', title);
        builder.addProp('initial', options.default);
        builder.addProp('result', options.result);
        builder.addProp('format', options.format);
        builder.addProp('validate', options.validate);
        builder.addProp('choices', choices.map((choice) => {
            if (typeof (choice) === 'string') {
                return { name: choice, message: choice, value: choice };
            }
            return choice;
        }));
        return this.$prompt(builder.toJSON());
    }
}
exports.Prompt = Prompt;
