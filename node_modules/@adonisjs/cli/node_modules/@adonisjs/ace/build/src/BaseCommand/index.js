"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const param_case_1 = __importDefault(require("param-case"));
const fancy_logs_1 = require("@poppinss/fancy-logs");
const colors_1 = require("@poppinss/colors");
const prompts_1 = require("@poppinss/prompts");
const Generator_1 = require("../Generator");
class BaseCommand {
    constructor(application) {
        this.application = application;
        this.prompt = this.application.environment === 'test'
            ? new prompts_1.FakePrompt()
            : new prompts_1.Prompt();
        this.logger = new fancy_logs_1.Logger({ fake: this.application.environment === 'test' });
        this.generator = new Generator_1.Generator();
    }
    static $boot() {
        if (this.$booted) {
            return;
        }
        this.$booted = true;
        Object.defineProperty(this, 'args', { value: [] });
        Object.defineProperty(this, 'flags', { value: [] });
        if (!this.hasOwnProperty('settings')) {
            Object.defineProperty(this, 'settings', { value: {} });
        }
        if (!this.hasOwnProperty('commandName')) {
            Object.defineProperty(this, 'commandName', { value: '' });
        }
        if (!this.hasOwnProperty('description')) {
            Object.defineProperty(this, 'description', { value: '' });
        }
    }
    static $defineArgument(options) {
        if (!options.propertyName) {
            throw new Error('"propertyName" is required to register command argument');
        }
        const arg = Object.assign({
            type: options.type || 'string',
            propertyName: options.propertyName,
            name: options.name || options.propertyName,
            required: options.required === false ? false : true,
        }, options);
        this.args.push(arg);
    }
    static $defineFlag(options) {
        if (!options.propertyName) {
            throw new Error('"propertyName" is required to register command flag');
        }
        const flag = Object.assign({
            name: options.name || param_case_1.default(options.propertyName),
            propertyName: options.propertyName,
            type: options.type || 'boolean',
        }, options);
        this.flags.push(flag);
    }
    get colors() {
        return (this.application.environment === 'test' ? new colors_1.FakeColors() : new colors_1.Colors());
    }
}
exports.BaseCommand = BaseCommand;
