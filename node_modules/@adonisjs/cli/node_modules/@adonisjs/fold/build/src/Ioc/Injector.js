"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers");
const InvalidInjectionException_1 = require("../Exceptions/InvalidInjectionException");
class Injector {
    constructor(_container) {
        this._container = _container;
    }
    _resolveInjections(targetName, injections, runtimeValues) {
        if (runtimeValues.length >= injections.length) {
            return runtimeValues;
        }
        return injections.map((injection, index) => {
            if (runtimeValues && runtimeValues[index] !== undefined) {
                return runtimeValues[index];
            }
            if (helpers_1.isPrimtiveConstructor(injection)) {
                throw InvalidInjectionException_1.InvalidInjectionException.invoke(injections[index], targetName, index);
            }
            return this._container['make'](injection);
        });
    }
    injectDependencies(target, runtimeValues) {
        if (!helpers_1.isClass(target) || target.makePlain === true) {
            return target;
        }
        const injections = target.hasOwnProperty('inject') ? (target.inject.instance || []) : [];
        return new target(...this._resolveInjections(target.name, injections, runtimeValues));
    }
    injectMethodDependencies(target, method, runtimeValues) {
        const constructor = target.constructor;
        const injections = constructor && constructor.hasOwnProperty('inject')
            ? (constructor.inject[method] || [])
            : [];
        return target[method](...this._resolveInjections(`${constructor.name}.${method}`, injections, runtimeValues));
    }
}
exports.Injector = Injector;
