"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@poppinss/utils");
class IocResolver {
    constructor(_container, _fallbackMethod, _rcNamespaceKey, _fallbackNamespace) {
        this._container = _container;
        this._fallbackMethod = _fallbackMethod;
        this._rcNamespaceKey = _rcNamespaceKey;
        this._fallbackNamespace = _fallbackNamespace;
        this._lookupCache = {};
        this._prefixNamespace = this._getPrefixNamespace();
    }
    _getPrefixNamespace() {
        if (!this._rcNamespaceKey) {
            return this._fallbackNamespace;
        }
        try {
            const application = this._container.use('Adonis/Core/Application');
            return application.namespacesMap.get(this._rcNamespaceKey) || this._fallbackNamespace;
        }
        catch (error) {
            return this._fallbackNamespace;
        }
    }
    resolve(namespace, prefixNamespace = this._prefixNamespace) {
        const cacheKey = prefixNamespace ? `${prefixNamespace}/${namespace}` : namespace;
        const cacheNode = this._lookupCache[cacheKey];
        if (cacheNode) {
            return cacheNode;
        }
        let method = this._fallbackMethod || 'handle';
        const tokens = namespace.split('.');
        if (tokens.length > 1) {
            method = tokens.pop();
        }
        const lookupNode = this._container.lookup(tokens.join('.'), prefixNamespace);
        if (!lookupNode) {
            throw new utils_1.Exception(`Unable to resolve ${tokens.join('.')} namespace from IoC container`);
        }
        this._lookupCache[cacheKey] = Object.assign(Object.assign({}, lookupNode), { method });
        return this._lookupCache[cacheKey];
    }
    call(namespace, prefixNamespace, args) {
        const lookupNode = typeof (namespace) === 'string'
            ? this.resolve(namespace, prefixNamespace)
            : namespace;
        return this._container.call(this._container.make(lookupNode.namespace), lookupNode.method, args || []);
    }
}
exports.IocResolver = IocResolver;
