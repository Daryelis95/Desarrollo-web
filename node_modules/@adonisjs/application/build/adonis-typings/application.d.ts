declare module '@ioc:Adonis/Core/Application' {
    import { IocContract } from '@adonisjs/fold';
    export type PreloadNode = {
        file: string;
        environment: ('web' | 'console' | 'test')[];
        optional: boolean;
    };
    export type SemverNode = {
        major: number;
        minor: number;
        patch: number;
        prerelease: (string | number)[];
        version: string;
    };
    export type MetaFileNode = {
        pattern: string;
        reloadServer: boolean;
    };
    export type RcFile = {
        typescript: boolean;
        exceptionHandlerNamespace: string;
        preloads: PreloadNode[];
        metaFiles: MetaFileNode[];
        commands: string[];
        directories: {
            [key: string]: string;
        };
        autoloads: {
            [key: string]: string;
        };
        namespaces: {
            [key: string]: string;
        };
    };
    export interface ApplicationContract {
        readonly rcFile: RcFile;
        readonly appRoot: string;
        readonly cliCwd?: string;
        readonly appName: string;
        readonly adonisVersion: SemverNode | null;
        readonly version: SemverNode | null;
        readonly typescript: boolean;
        exceptionHandlerNamespace: string;
        container: IocContract;
        preloads: PreloadNode[];
        environment: 'web' | 'console' | 'test' | 'unknown';
        isReady: boolean;
        inProduction: boolean;
        inDev: boolean;
        isShuttingDown: boolean;
        directoriesMap: Map<string, string>;
        autoloadsMap: Map<string, string>;
        namespacesMap: Map<string, string>;
        makePath(...paths: string[]): string;
        makePathFromCwd(...paths: string[]): string;
        configPath(...paths: string[]): string;
        publicPath(...paths: string[]): string;
        databasePath(...paths: string[]): string;
        migrationsPath(...paths: string[]): string;
        seedsPath(...paths: string[]): string;
        resourcesPath(...paths: string[]): string;
        viewsPath(...paths: string[]): string;
        startPath(...paths: string[]): string;
        tmpPath(...paths: string[]): string;
    }
    const Application: ApplicationContract;
    export default Application;
}
