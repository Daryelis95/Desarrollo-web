"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const semver_1 = require("semver");
const rcParser_1 = require("./rcParser");
class Application {
    constructor(appRoot, container, rcContents, pkgFile) {
        this.appRoot = appRoot;
        this.container = container;
        this.isReady = false;
        this.cliCwd = process.env.ADONIS_CLI_CWD;
        this.isShuttingDown = false;
        this.inProduction = process.env.NODE_ENV === 'production';
        this.inDev = !this.inProduction;
        this.environment = 'unknown';
        this.preloads = [];
        this.directoriesMap = new Map();
        this.autoloadsMap = new Map();
        this.namespacesMap = new Map();
        this.rcFile = rcParser_1.parse(rcContents);
        this.typescript = this.rcFile.typescript;
        this.appName = pkgFile.name || 'adonis-app';
        this.version = this._parseVersion(pkgFile.version || '0.0.0');
        this.adonisVersion = pkgFile.adonisVersion ? this._parseVersion(pkgFile.adonisVersion) : null;
        this.exceptionHandlerNamespace = this.rcFile.exceptionHandlerNamespace;
        this.preloads = this.rcFile.preloads;
        this.directoriesMap = new Map(Object.entries(this.rcFile.directories));
        this.autoloadsMap = new Map(Object.entries(this.rcFile.autoloads));
        this.namespacesMap = new Map(Object.entries(this.rcFile.namespaces));
        this._setEnvVars();
    }
    _parseVersion(version) {
        const parsed = semver_1.coerce(version);
        if (!parsed) {
            return null;
        }
        return {
            major: parsed.major,
            minor: parsed.minor,
            patch: parsed.patch,
            prerelease: parsed.prerelease.map((release) => release),
            version: parsed.version,
        };
    }
    _setEnvVars() {
        process.env.APP_NAME = this.appName;
        if (this.version) {
            process.env.APP_VERSION = this.version.version;
        }
    }
    makePath(...paths) {
        return path_1.join(this.appRoot, ...paths);
    }
    makePathFromCwd(...paths) {
        return path_1.join(this.cliCwd || this.appRoot, ...paths);
    }
    configPath(...paths) {
        return this.makePath(this.directoriesMap.get('config'), ...paths);
    }
    publicPath(...paths) {
        return this.makePath(this.directoriesMap.get('public'), ...paths);
    }
    databasePath(...paths) {
        return this.makePath(this.directoriesMap.get('database'), ...paths);
    }
    migrationsPath(...paths) {
        return this.makePath(this.directoriesMap.get('migrations'), ...paths);
    }
    seedsPath(...paths) {
        return this.makePath(this.directoriesMap.get('seeds'), ...paths);
    }
    resourcesPath(...paths) {
        return this.makePath(this.directoriesMap.get('resources'), ...paths);
    }
    viewsPath(...paths) {
        return this.makePath(this.directoriesMap.get('views'), ...paths);
    }
    startPath(...paths) {
        return this.makePath(this.directoriesMap.get('start'), ...paths);
    }
    tmpPath(...paths) {
        return this.makePathFromCwd(this.directoriesMap.get('tmp'), ...paths);
    }
}
exports.Application = Application;
