"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@poppinss/utils");
const DEFAULT_DIRECTORIES = {
    config: 'config',
    public: 'public',
    contracts: 'contracts',
    providers: 'providers',
    database: 'database',
    migrations: 'database/migrations',
    seeds: 'database/seeds',
    resources: 'resources',
    views: 'resources/views',
    start: 'start',
    tmp: 'tmp',
};
const DEFAULT_NAMESPACES = {
    httpControllers: 'App/Controllers/Http',
    eventListeners: 'App/Listeners',
    redisListeners: 'App/Listeners',
};
function parse(contents) {
    contents = Object.assign({
        typescript: true,
        directories: {},
        namespaces: {},
        exceptionHandlerNamespace: 'App/Exceptions/Handler',
        preloads: [],
        autoloads: {},
        metaFiles: [],
        commands: [],
    }, contents);
    return {
        typescript: contents.typescript,
        directories: Object.assign({}, DEFAULT_DIRECTORIES, contents.directories),
        exceptionHandlerNamespace: contents.exceptionHandlerNamespace,
        preloads: contents.preloads.map(({ file, optional, environment }, index) => {
            if (!file) {
                throw new utils_1.Exception(`Invalid value for preloads[${index}]`, 500, 'E_PRELOAD_MISSING_FILE_PROPERTY');
            }
            return {
                file,
                optional: optional === undefined ? false : optional,
                environment: environment === undefined ? ['web', 'console', 'test'] : environment,
            };
        }),
        namespaces: Object.assign({}, DEFAULT_NAMESPACES, contents.namespaces),
        autoloads: contents.autoloads,
        metaFiles: contents.metaFiles.map((file, index) => {
            if (typeof (file) === 'string') {
                return {
                    pattern: file,
                    reloadServer: true,
                };
            }
            const { pattern, reloadServer } = file;
            if (!pattern) {
                throw new utils_1.Exception(`Invalid value for metaFiles[${index}]`, 500, 'E_METAFILE_MISSING_PATTERN');
            }
            return {
                pattern,
                reloadServer: !!reloadServer,
            };
        }),
        commands: contents.commands,
    };
}
exports.parse = parse;
