"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LinesFile_1 = require("../formats/LinesFile");
class EnvFile {
    constructor(_basePath) {
        this._basePath = _basePath;
        this._envContents = new LinesFile_1.LinesFile(this._basePath, '.env');
        this._exampleEnvContents = new LinesFile_1.LinesFile(this._basePath, '.env.example');
    }
    set(key, value) {
        const matchingLine = this._envContents.get().find((line) => line.startsWith(`${key}=`));
        const newText = `${key}=${value}`;
        if (matchingLine && newText !== matchingLine) {
            this._envContents.update(matchingLine, newText);
            return this;
        }
        this._envContents.add(`${key}=${value}`);
        this._exampleEnvContents.add(`${key}=`);
        return this;
    }
    get() {
        return this._envContents.get().reduce((result, line) => {
            const [key, value] = line.split('=');
            result[key.trim()] = value.trim();
            return result;
        }, {});
    }
    exists() {
        return this._envContents.exists();
    }
    unset(key) {
        const matchingLine = this._envContents.get().find((line) => line.startsWith(`${key}=`));
        if (matchingLine) {
            this._envContents.remove(matchingLine);
        }
        const exampleFileMatchingLine = this._exampleEnvContents.get().find((line) => {
            return line.startsWith(`${key}=`);
        });
        if (exampleFileMatchingLine) {
            this._exampleEnvContents.remove(exampleFileMatchingLine);
        }
        return this;
    }
    commit() {
        this._envContents.commit();
        this._exampleEnvContents.commit();
    }
    rollback() {
        this._envContents.rollback();
        this._exampleEnvContents.rollback();
    }
}
exports.EnvFile = EnvFile;
