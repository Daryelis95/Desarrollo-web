"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const JsonFile_1 = require("../formats/JsonFile");
class RcFile extends JsonFile_1.JsonFile {
    constructor(basePath) {
        super(basePath, '.adonisrc.json');
        this._preloads = [];
        this._metaFiles = [];
        this._commands = [];
        this._preloads = this.get('preloads', []);
        this._metaFiles = this.get('metaFiles', []);
        this._commands = this.get('commands', []);
    }
    onset(lifecycle, body) {
        if (lifecycle === 'rollback') {
            if (body.key.startsWith('preloads')) {
                const index = body.key.split('[')[1].replace(/\]/g, '');
                this.get('preloads', []).splice(index, 1);
                return true;
            }
            if (body.key.startsWith('metaFiles')) {
                const index = body.key.split('[')[1].replace(/\]/g, '');
                this.get('metaFiles', []).splice(index, 1);
                return true;
            }
            if (body.key.startsWith('commands')) {
                const index = body.key.split('[')[1].replace(/\]/g, '');
                this.get('commands', []).splice(index, 1);
                return true;
            }
        }
    }
    setExceptionHandler(namespace) {
        this.set('exceptionHandlerNamespace', namespace);
        return this;
    }
    setPreload(filePath, environment, optional) {
        let preloadIndex = this._preloads.findIndex((preload) => preload.file === filePath);
        preloadIndex = preloadIndex === -1 ? this._preloads.length : preloadIndex;
        const preloadEntry = {
            file: filePath,
        };
        if (environment) {
            preloadEntry.environment = environment;
        }
        if (optional !== undefined) {
            preloadEntry.optional = optional;
        }
        this._preloads[preloadIndex] = preloadEntry;
        this.set(`preloads[${preloadIndex}]`, preloadEntry);
        return this;
    }
    setAutoload(namespace, autoloadPath) {
        this.set(`autoloads.${namespace}`, autoloadPath);
        return this;
    }
    setDirectory(key, value) {
        this.set(`directories.${key}`, value);
        return this;
    }
    addMetaFile(filePath, reloadServer) {
        let entryIndex = this._metaFiles.findIndex((file) => {
            if (file.pattern) {
                return file.pattern === filePath;
            }
            return file === filePath;
        });
        entryIndex = entryIndex === -1 ? this._metaFiles.length : entryIndex;
        const entry = reloadServer === false ? {
            pattern: filePath,
            reloadServer: false,
        } : filePath;
        this._metaFiles[entryIndex] = entry;
        this.set(`metaFiles[${entryIndex}]`, entry);
    }
    addCommand(commandPath) {
        let entryIndex = this._commands.findIndex((command) => {
            return command === commandPath;
        });
        entryIndex = entryIndex === -1 ? this._commands.length : entryIndex;
        this._commands[entryIndex] = commandPath;
        this.set(`commands[${entryIndex}]`, commandPath);
    }
}
exports.RcFile = RcFile;
