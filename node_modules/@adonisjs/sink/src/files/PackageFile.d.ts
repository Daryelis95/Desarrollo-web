/// <reference types="node" />
import { SpawnSyncReturns, StdioOptions } from 'child_process';
import { packageJson } from 'mrm-core';
import { BaseFile } from '../base/BaseFile';
declare type InstallerNotifier = (list: string[], dev: boolean) => void;
declare type Dependencies = {
    list: string[];
    versions?: any;
    dev: boolean;
};
export declare class PackageFile extends BaseFile {
    private _installerOutput;
    filePointer: ReturnType<typeof packageJson>;
    protected $actions: never[];
    protected $install: {
        dependency: string;
        version: string;
        dev: boolean;
    }[];
    protected $uninstall: {
        dependency: string;
        dev: boolean;
    }[];
    private _useYarn;
    private _beforeInstall?;
    private _beforeUninstall?;
    constructor(basePath: string, _installerOutput?: StdioOptions);
    private _runHooks;
    private _setClient;
    private _installerFn;
    private _installerFnAsync;
    private _commitDependencies;
    private _rollbackDependencies;
    private _commitDependenciesAsync;
    private _rollbackDependenciesAsync;
    private _commitActions;
    private _rollbackActions;
    set(key: string, value: any): this;
    yarn(useYarn: boolean): this;
    unset(key: string): this;
    setScript(name: string, script: string): this;
    appendScript(name: string, script: string): this;
    prependScript(name: string, script: string): this;
    removeScript(name: string, script?: string | RegExp): this;
    install(dependency: string, version?: string, dev?: boolean): this;
    uninstall(dependency: string, dev?: boolean): this;
    delete(): this;
    get(): any;
    get(address: string | string[], defaultValue?: any): any;
    exists(): boolean;
    getInstalls(dev?: boolean): Dependencies;
    getUninstalls(dev: boolean): Dependencies;
    beforeInstall(callback: InstallerNotifier): this;
    beforeUninstall(callback: InstallerNotifier): this;
    commit(): SpawnSyncReturns<Buffer> | undefined;
    commitAsync(): Promise<SpawnSyncReturns<Buffer> | undefined>;
    rollback(): SpawnSyncReturns<Buffer> | undefined;
    rollbackAsync(): Promise<SpawnSyncReturns<Buffer> | undefined>;
}
export {};
