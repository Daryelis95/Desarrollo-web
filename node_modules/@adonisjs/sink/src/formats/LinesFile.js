"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mrm_core_1 = require("mrm-core");
const BaseFile_1 = require("../base/BaseFile");
class LinesFile extends BaseFile_1.BaseFile {
    constructor(basePath, filename) {
        super(basePath);
        this.$actions = [];
        this.$cdIn();
        this.filePointer = mrm_core_1.lines(filename);
        this.$cdOut();
    }
    add(lines) {
        this.$addAction('add', { lines });
        return this;
    }
    update(oldText, newText) {
        this.$addAction('update', { oldText, newText });
        return this;
    }
    remove(lines) {
        this.$addAction('remove', { lines });
        return this;
    }
    delete() {
        this.$addAction('delete');
        return this;
    }
    get() {
        return this.filePointer.get();
    }
    exists() {
        return this.filePointer.exists();
    }
    commit() {
        this.$cdIn();
        const actions = this.$getCommitActions();
        const deleteFile = actions.find(({ action }) => action === 'delete');
        if (deleteFile) {
            this.filePointer.delete();
            this.$cdOut();
            return;
        }
        actions.forEach(({ action, body }) => {
            if (typeof (this[`on${action}`]) === 'function') {
                const handled = this[`on${action}`]('commit', body);
                if (handled) {
                    return;
                }
            }
            if (action === 'add') {
                this.filePointer.add(body.lines);
                return;
            }
            if (action === 'update') {
                this.filePointer.remove(body.oldText);
                this.filePointer.add(body.newText);
                return;
            }
            if (action === 'remove') {
                this.filePointer.remove(body.lines);
            }
        });
        this.filePointer.save();
        this.$cdOut();
    }
    rollback() {
        this.$cdIn();
        const actions = this.$getRevertActions();
        actions.forEach(({ action, body }) => {
            if (typeof (this[`on${action}`]) === 'function') {
                const handled = this[`on${action}`]('rollback', body);
                if (handled) {
                    return;
                }
            }
            if (action === 'add') {
                this.filePointer.remove(body.lines);
                return;
            }
            if (action === 'update') {
                this.filePointer.remove(body.newText);
                this.filePointer.add(body.oldText);
                return;
            }
            if (action === 'remove') {
                this.filePointer.add(body.lines);
            }
        });
        this.filePointer.save();
        this.$cdOut();
    }
}
exports.LinesFile = LinesFile;
